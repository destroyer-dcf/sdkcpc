{
	// COMMAND BASIC 1.1
	"comment no basic": {
		"prefix": "1 '",
		"body": [
			"${0:// comment...}'"
		],
		"description": "Comments external to the basic language"
	},
	"ABS": {
		"prefix": "ABS",
		"body": [
			"ABS ${0://numeric expresion}"
		],
		"description": "ABS(<numeric expression>). Return value: Numeric. Returns the absolute value of the given expression -which primarily means that negative numbers are returned as positive."
	},
	"AFTER": {
		"prefix": "AFTER",
		"body": [
			"AFTER ${0://integer expresion},${1://integer expresion} GOSUB ${2://line number}"
		],
		"description": "AFTER <integer expression>[,<integer expression>] GOSUB <line number>. Invoke a subroutine after a given time period has elapsed. The first <integer expression>, indicates the period of the delay, in units of 1/50 second, and the second <integer expression>, (in range 0 to 3), indicates which of the four available delay timers should be used."
	},
	"AND": {
		"prefix": "AND",
		"body": [
			"AND ${0://argument}"
		],
		"description": "Operator <argument> AND <argument>\tPerforms bit-wise boolean operation on integers. Result is 0 unless both arguments are 1."
	},
	"ASC": {
		"prefix": "ASC",
		"body": [
			"ASC ${0://string expression}"
		],
		"description": "Function: ASC(<string expression>)\tReturn value: Numeric.\tGets the numeric value of the first character of a string as long as ASCII characters are used."
	},
	"ATN": {
		"prefix": "ATN",
		"body": [
			"ATN ${0://numeric expresion}"
		],
		"description": "Function ATN(<numeric expression>)\tReturn value: Numeric.\tCalculates the arc-tangent (forcing the numeric expression) to a real number ranging from -PI/2 to +PI/2 of the value specified\t.Example\tPRINT ATN(1)\t0.785398163 "
	},
	"BIN$":{
	   "prefix":"BIN$",
	   "body":[
		  "BIN$(${1:unsigned integer expression>},${2:[<integer expression>]})"
	   ],
	   "description":"Produces a string of binary digits that represents the value of the <unsigned integer expression>, filling with leading zeros to the number of digits instructed by the second <integer expression>."
	},
	"BORDER":{
	   "prefix":"BORDER",
	   "body":[
		  "BORDER ${1:<colour>},${2:[<colour>]}"
	   ],
	   "description":"To change the colour of the border on the screen. If two colours are specified, the border alternates between the two at the rate determined in the SPEED INK command, if given. The range of border colours is 0 to 26."
	},
	"CALL":{
	   "prefix":"CALL",
	   "body":[
		  "CALL ${1:<address expression>} ,${2:[<list of: <parameter>]}"
	   ],
	   "description":"Allows an externally developed sub-routine to be invoked from BASIC. Use with caution, not a function for the inexperienced to experiment with."
	},
	"CAT":{
	   "prefix":"CAT",
	   "body":[
		  "CAT"
	   ],
	   "description":"Causes BASIC to start reading the directory of the current drive (cassette or disc) and to display the names of all files found."
	},
	"CHAIN":{
	   "prefix":"CHAIN",
	   "body":[
		  "CHAIN ${1:<file name>},${2:[<line number expression>]}"
	   ],
	   "description":"CHAIN loads a program from disc or cassette into the memory; replacing the existing program. The new program then commences running, either from the beginning, or from the line specified in the optional <line number expression>.Protected files (saved with the ',P' type) can be loaded and run by chaining."
	},
	"CHAIN MERGE":{
	   "prefix":"CHAIN MERGE",
	   "body":[
		  "CHAIN MERGE ${1:<file name>},${2:[<line number expression>]},${2:DELETE <line number range>]}"
	   ],
	   "description":"CHAIN MERGE merges a program from disc or cassette into the current program memory. The <line number expression>, indicates the line number from which execution is to begin once the new program is chain merged. In the absence of <line number expression>, BASIC will default to the lowest line number available."
	},
	"CHR$":{
	   "prefix":"CHR$",
	   "body":[
		  "CHR$(${1:<integer expression>})"
	   ],
	   "description":"Return value String."
	},
	"CINT":{
	   "prefix":"CINT",
	   "body":[
		  "CINT(${1:<numeric expression>})"
	   ],
	   "description":"Return value Numeric. Converts the given value to a rounded integer in the range -32768…32767."
	},
	"CLEAR":{
	   "prefix":"CLEAR",
	   "body":[
		  "CLEAR"
	   ],
	   "description":"Clears all variables to zero or null. All open files are abandoned, all arrays and user functions are erased, and BASIC is set to radians mode of calculation."
	},
	"CLEAR INPUT":{
	   "prefix":"CLEAR INPUT",
	   "body":[
		  "CLEAR INPUT"
	   ],
	   "description":"Compatibility Only available with BASIC 1.1. Discards all previously typed input from the keyboard, still in the keyboard buffer."
	},
	"CLG$":{
	   "prefix":"CLG$",
	   "body":[
		  "CLG${1:[<masked ink>]}"
	   ],
	   "description":"Clears the graphics screen to the graphics paper colour. If the <ink> is specified, the graphics paper is set to that value."
	},
	"CLOSEIN":{
	   "prefix":"CLOSEIN",
	   "body":[
		  "CLOSEIN"
	   ],
	   "description":"Close any input file from disc or cassette. Commands such as NEW and CHAIN MERGE will also abandon any open files."
	},
	"CLOSEOUT":{
	   "prefix":"CLOSEOUT",
	   "body":[
		  "CLOSEOUT"
	   ],
	   "description":"Close any output file to disc or cassette."
	},
	"CLS":{
	   "prefix":"CLS",
	   "body":[
		  "CLS #${1:[#<stream expression>]}"
	   ],
	   "description":"Clear the given screen stream (window) to its paper ink. If no <stream expression> is given, screen stream #0 is cleared."
	},
	"CONT":{
	   "prefix":"CONT",
	   "body":[
		  "CONT"
	   ],
	   "description":"Continue program execution after a *Break*, STOP or END, as long as the program has not been altered. Direct commands may be entered."
	},
	"COPYCHR$":{
	   "prefix":"COPYCHR$",
	   "body":[
		  "COPYCHR$(#${1:#<stream expression>})"
	   ],
	   "description":"Return value String. Compatiblity Only available with BASIC 1.1.COPies ChaRacter from the current position in the stream (which MUST be specified). If the character read is not recognized, a null string is returned."
	},
	"COS":{
	   "prefix":"COS",
	   "body":[
		  "COS(${1:<numeric expression>})"
	   ],
	   "description":"Return value Numeric. Calculates the COSINE of a given value. The function defaults to radian measure unless specifically instructed otherwise by the DEG command."
	},
	"CREAL":{
	   "prefix":"CREAL",
	   "body":[
		  "CREAL(${1:<numeric expression>})"
	   ],
	   "description":"Return value Numeric. Converts a value to a real number (As opposed to integer)."
	},
	"CURSOR":{
	   "prefix":"CURSOR",
	   "body":[
		  "CURSOR ${1:[<system switch>]},${2:[<user switch>]}"
	   ],
	   "description":"Compatibility Only available with BASIC 1.1Sets the system switch or the user switch to the cursor, ON or OFF. The <system switch> and <user switch> parameters must be either 0 (OFF) or 1 (ON). The cursor is displayed whenever both the <system switch> and <user switch> are ON (1). The <system switch> is automatically turned OFF when printing text to screen. Either swtich parameter may be omitted, but not both. If a switch parameter is omitted, that particular switch state is not changed."
	},
	"DATA":{
	   "prefix":"DATA",
	   "body":[
		  "DATA ${1:<list of constant>}"
	   ],
	   "description":"Compatibility With BASIC 1.0, DATA statements have to be at the end of the line. With BASIC 1.1, DATA statements can appear anywhere within a line. Declares constant data for use within a program. One of the most widely used features of BASIC that lumps constant data in DATA statements for retrieval as required. The data type must be consistent with the variable invoking it. A DATA statement may appear anywhere in a program."
	},
	"DEC$":{
	   "prefix":"DEC$",
	   "body":[
		  "DEC$(${1:<numeric expression>},${2:<format template>})"
	   ],
	   "description":"Return value String. Compatiblity Only available with BASIC 1.1. Return a DECimal string representation of the <numeric expression>, using the specified <format template> to control the print format of the resulting string."
	},
	"DEF-FN":{
	   "prefix":"DEF FN",
	   "body":[
		  "DEF FN ${1:<name> [(<formal parameters>)]}=,${2:<general expression>}"
	   ],
	   "description":"BASIC allows the program to define and use simple value returning functions. DEF FuNction is the definition part of this mechanism and creates program-specific function which works within the program in the same way as a function such as COS operates as a built-in function of BASIC."
	},
	"DEFINT":{
	   "prefix":"DEFINT",
	   "body":[
		  "DEFINT ${1:<range(s) of letters>}"
	   ],
	   "description":"Define default variable types where <type> is integer, real or string. The variable will be set according to the first letter of the variable's name – which may be either upper or lower case."
	},
	"DEFSTR":{
	   "prefix":"DEFSTR",
	   "body":[
		  "DEFSTR ${1:<range(s) of letters>}"
	   ],
	   "description":"Define default variable types where <type> is integer, real or string. The variable will be set according to the first letter of the variable's name – which may be either upper or lower case."
	},
	"DEFREAL":{
	   "prefix":"DEFREAL",
	   "body":[
		  "DEFREAL"
	   ],
	   "description":"Define default variable types where <type> is integer, real or string. The variable will be set according to the first letter of the variable's name – which may be either upper or lower case."
	},
	"DEG":{
	   "prefix":"DEG",
	   "body":[
		  "DEG"
	   ],
	   "description":"et degrees mode. The default condition is for functions such as SIN and COS is to assume radian measure for numeric data. The command sets to degree mode until instructed otherwise by a CLEAR or RAD - or if any new program is loaded."
	},
	"DERR":{
	   "prefix":"DERR",
	   "body":[
		  "DERR"
	   ],
	   "description":"Type Numeric. Compatiblity Only available with BASIC 1.1. Report the last error code returned by the disc operating system. The value of DERR may be used to ascertain the particular Disc ERRor that occured. See the listing of error messages."
	},
	"DI":{
	   "prefix":"DI",
	   "body":[
		  "DI"
	   ],
	   "description":"Disable interrupts (other than the *Break* interrupt) until re-enabled explicitly by EI or implicitly by the RETURN at the end of an interrupt GOSUB routine. Used when the program wishes to get on literally without interruption – for example when two routines within a program are competing for use of resources. In the example above, the main program and the interrupt subroutine are competing for the use of the graphics display."
	},
	"DIM":{
	   "prefix":"DIM",
	   "body":[
		  "DIM ${1:<list of: subscripted variable>}"
	   ],
	   "description":"Allocate space for arrays and specify maximum subscript values. Basic must be advised of the space to be reserved for an array, or it will default to 10. Once set either implicitly or explicitly, the size of the array may not be changed, or an error will result."
	},
	"DRAW":{
	   "prefix":"DRAW",
	   "body":[
		  "DRAW ${1:<x co-ordinate>},${2:<y co-ordinate>},${3:[<ink>]},${3:[<ink mode>]}"
	   ],
	   "description":"Compatibility <ink mode> is only available with BASIC 1.1 Draws a line on the screen from the current graphics cursor position to an absolute position. The co-ordinate positions remain unchanged between the three different screen modes. The <ink> in which to draw the line may be specified (in the range 0 to 15). The optional <ink mode> determines how the ink being written interacts with that already on the graphics screen. The four <ink mode>s are: 0: Normal, 1: XOR (eXclusive OR) ,2: AND, 3: OR"
	},
	"DRAWR":{
	   "prefix":"DRAWR",
	   "body":[
		  "DRAWR ${1:<x offset>},<y offset>}[,<ink>][,<ink mode>]}"
	   ],
	   "description":"Compatibility <ink mode> is only available with BASIC 1.1 To draw a line on the screen from the current graphics cursor position to a position relative to it. The <ink> in which to draw the line may be specified (in the range 0 to 15). The optional <ink mode> determines how the ink being written interacts with that already on the graphics screen. The four <ink mode>s are: 0: Normal, 1: XOR (eXclusive OR), 2: AND ,3: OR"
	},
	"EI":{
	   "prefix":"EI",
	   "body":[
		  "EI"
	   ],
	   "description":"To Enable Interrupts disabled by a DI command."
	},
	"END":{
	   "prefix":"END",
	   "body":[
		  "END"
	   ],
	   "description":"End of program. An END is implicit in AMSTRAD BASIC as the program passes the last line of instruction. END closes all cassette files and returns to the direct mode. Sound queues will continue until empty."
	},
	"ENT":{
	   "prefix":"ENT",
	   "body":[
		  "ENT ${1:<envelope number>},${2:[<envelope section>},${3:[<envelope section}"
	   ],
	   "description":"Sets the Tone ENvelope specified in the <envelope section> (in the range 1 to 15), which is used in conjunction with the SOUND command. If the <envelope number> is negative (in the range -1 to -15), the envelope repeats until the end of the duration of the SOUND command."
	},
	"ENV":{
	   "prefix":"ENV",
	   "body":[
		  "ENV ${1:<envelope number>},${2:[<envelope section>]},${3:[<envelope section>]}"
	   ],
	   "description":"Sets the volume envelope specified in the <envelope number> (in the range 1 to 15), which is used in conjunction with the SOUND command."
	},
	"EOF":{
	   "prefix":"EOF",
	   "body":[
		  "EOF"
	   ],
	   "description":"Return value Numeric (-1:true or 0:false).Tests to see if the cassette input is at the end of the file. Returns – 1 (true) at the end, otherwise 0 (false)."
	},
	"ERASE":{
	   "prefix":"ERASE",
	   "body":[
		  "ERASE ${1:list of: <variable name>}"
	   ],
	   "description":"When an array is no longer required, it may be ERASEd and the memory used be reclaimed ready for other use."
	},
	"ERL":{
	   "prefix":"ERL",
	   "body":[
		  "ERL"
	   ],
	   "description":"Return value Numeric. Reports the Line number of the last Error encountered."
	},
	"ERR":{
	   "prefix":"ERR",
	   "body":[
		  "ERR"
	   ],
	   "description":"Return value Numeric. Reports the number of the last error encountered. See the list of error message."
	},
	"ERROR":{
	   "prefix":"ERROR",
	   "body":[
		  "ERROR ${1:<integer expression>}"
	   ],
	   "description":"Invokes the error specified in the <integer expression>. The error may be one already used and by BASIC, in which case the action taken is the same as would be taken if such an error had been detected by BASIC.Error numbers beyond those recognised by BASIC may be used by the program to signal its own errors."
	},
	"EVERY":{
	   "prefix":"EVERY",
	   "body":[
		  "EVERY ${1:<integer expression>},${2:[<integer expression>]} GOSUB ${3:<line number>}"
	   ],
	   "description":"The EVERY command allows a BASIC program to arrange for subroutines to be called at regular intervals. Four delay timers are available, specified by the 2nd <integer expression> in the range 0 to 3 each of which may have a subroutine associated with it."
	},
	"EXP":{
	   "prefix":"EXP",
	   "body":[
		  "EXP(${1:<numeric expression>})"
	   ],
	   "description":"Return value Numeric (Real). Calculates E to the power given in numeric expression - where E is approximately 2.7182818 - the number whose natural logarithm is 1."
	},
	"FILL":{
	   "prefix":"FILL",
	   "body":[
		  "FILL ${1:<ink>}"
	   ],
	   "description":"Compatibility Only available with BASIC 1.1. Fills an arbitrary area of the graphics screen. The edges of the area are bounded to lines drawn either in the current graphics pen ink or in the ink being used to fill (in the range 0 to 15). The fill starts from the current graphics cursor position. If this position lies on an edge, nothing will be filled."
	},
	"FIX":{
	   "prefix":"FIX",
	   "body":[
		  "FIX(${1:<numeric expression>})"
	   ],
	   "description":"Return value Numeric (Integer). Unlike CINT, FIX merely removes the part of the numeric expression, to the right of the decimal point, and leaves an integer result, rounding towards zero."
	},
	"FOR":{
	   "prefix":"FOR",
	   "body":[
		  "FOR ${1:<simple variable>}=${3:<start>} TO ${3:<end>} STEP ${4:<size>}"
	   ],
	   "description":"Execute a body of program a given number of times, stepping a control variable between a start and an end value. If not specified, STEP defaults to 1."
	},
	"FRAME":{
	   "prefix":"FRAME",
	   "body":[
		  "FRAME"
	   ],
	   "description":"Compatiblity Only available with BASIC 1.1. Synchronices the writing of the graphics on the screen with the frame flyback of the display. The overall effect of this is that character or graphics movement on the screen will appear to be smoother, without flickering or tearing."
	},
	"FRE":{
	   "prefix":"FRE",
	   "body":[
		  "FRE(${1:<numeric of string expression>})"
	   ],
	   "description":"Return value Numeric.. Establishes how much memory remains unused by BASIC. The form FRE('') forces a garbage collection before returning a value for available space."
	},
	"GOSUB2":{
	   "prefix":"GOSUB",
	   "body":[
		  "GOSUB ${1:<line number>}"
	   ],
	   "description":"Call a BASIC subroutine by branching to the specified line number."
	},
	"GOTO":{
	   "prefix":"GOTO",
	   "body":[
		  "GOTO ${1:<line number>}"
	   ],
	   "description":"Branch to specified line number."
	},
	"GRAPHICS-PAPER":{
	   "prefix":"GRAPHICS PAPER",
	   "body":[
		  "GRAPHICS PAPER ${1:<ink>}"
	   ],
	   "description":"Compatibility Only available with BASIC 1.1. Sets the <ink> of the graphics paper, ie. the area behind graphics drawn on the screen. When drawing continuous lines, the graphics papers will not be seen. The graphics paper's ink (in the range 0 to 15) is used for the paper area of characters written when TAG is in operation, and as the default when clearing the graphics window, using CLG."
	},
	"GRAPHICS-PEN":{
	   "prefix":"GRAPHICS PEN",
	   "body":[
		  "GRAPHICS PEN ${1:[<ink>]},${1:[<background mode>]}"
	   ],
	   "description":"Compatibility Only available with BASIC 1.1. Set the <ink> (in the range 0 to 15) to be used for drawing lines and plotting points. The graphics <background mode> can also be set to either: 0: Opaque background., 1: Transparent background. Transparent background affects the graphics paper of characters written with TAG on, and the gaps in dotted lines. Either parameter may be omitted, but not both. If a parameter is omitted, that particular setting is not changed."
	},
	"HEX$":{
	   "prefix":"HEX$",
	   "body":[
		  "HEX$(${1:< unsigned integer expression>},${2:[<integer expression>]})"
	   ],
	   "description":"Return value String. Converts the number given into Hexadecimal form. The second <integer expression> can be used to specify the minimum length of the result."
	},
	"HIMEN":{
	   "prefix":"HIMEN",
	   "body":[
		  "HIMEM"
	   ],
	   "description":"Return value Numeric.Gives the address of the highest byte of memory used by BASIC, and can be used in numeric expressions in the usual way. Before resetting the highest byte of available memory using the MEMORY command, it is advisable to issue the command"
	},
	"IF-GOTO":{
	   "prefix":"IF",
	   "body":[
		  "IF ${1:<logical expression>} GOTO ${2:<line number>} ELSE ${3:<option part>}"
	   ],
	   "description":"A very widely used command that is used to conditionally determine branch points in a program. The logical part is evaluated, and if true the THEN or GOTO part is executed, if false, the program skips to the ELSE part, or merely passes onto the next line. The statements may be nested to any depth, limited by line length. The IF is terminated by the line end. It is not permissable to have further statements that are independent of the IF on the same line."
	},
	"IF-THEN":{
	   "prefix":"IF",
	   "body":[
		  "IF ${1:<logical expression>} THEN ${2:<option part>} ELSE ${3:<option part>}"
	   ],
	   "description":"A very widely used command that is used to conditionally determine branch points in a program. The logical part is evaluated, and if true the THEN or GOTO part is executed, if false, the program skips to the ELSE part, or merely passes onto the next line. The statements may be nested to any depth, limited by line length. The IF is terminated by the line end. It is not permissable to have further statements that are independent of the IF on the same line."
	},
	"INK":{
	   "prefix":"INK",
	   "body":[
		  "INK ${1:<ink>},${2:<colour>},${3:[<colour>]}"
	   ],
	   "description":"Assigns colour(s) to a given ink. The <ink> parameter describes the ink reference, which must be an integer expression in the range 0 to 15, for use in the appertaining PEN or PAPER command. The first <colour> parameter should be an integer expression yielding a colour value in the range 0 to 26. If an optional second <colour> is specified, the ink alternates between the two colours, at a rate determined by SPEED INK command. Depending on the current screen mode, a number of INKs are available."
	},
	"INKEY":{
	   "prefix":"INKEY",
	   "body":[
		  "INKEY(${1:<integer expression>})"
	   ],
	   "description":"Return value Numeric. This function interrogates the keyboard to report which keys are being pressed. The keyboard is scanned at 1/50 sec. The function is particularly useful for spotting Y/N responses, since the state of shift is not required according to one of the interpretation options."
	},
	"INKEY$":{
	   "prefix":"INKEY$",
	   "body":[
		  "INKEY$"
	   ],
	   "description":"Return value String. Reads a key from the keyboard to provide operator interaction without hitting [ENTER] after every answer. If there is a key pressed, then the function responds - if no key is pressed, it continues to return an empty string which is used to loop until a valid input is detected for processing."
	},
	"INP":{
	   "prefix":"INP",
	   "body":[
		  "INP(${1:<port number>})"
	   ],
	   "description":"Return value Numeric. A function that returns the input value from the I/O port specified in the address."
	},
	"INPUT":{
	   "prefix":"INPUT",
	   "body":[
		  "INPUT ${1:\"<quoted string>\"},${2:<variables>}$"
	   ],
	   "description":"Reads data from the stated stream. A semicolon after INPUT suppresses the carriage return typed at the end of the line being entered. A semicolon after the <quoted string> causes a question mark to be displayed. A comma suppresses the question mark. "
	},
	"INSTR":{
	   "prefix":"INSTR",
	   "body":[
		  "INSTR(${1:[<integer expression>},\"${2:<string expression>}\",\"${3:<string expression>}\")"
	   ],
	   "description":"Return value String. Searches the first string expression, for the first occurance of the second string expression), where the optional number at the start indicates where to start the search - otherwise the search begins at the first character of the first string expression)."
	},
	"INT":{
	   "prefix":"INT",
	   "body":[
		  "INT(${1:<numeric expression>})"
	   ],
	   "description":"Return value Numeric (Integer). Rounds the number to the nearest lower integer, removing any fractional part. The same as FIX for positive numbers, but returns one less than FIX for negative numbers not already integers."
	},
	"JOY":{
	   "prefix":"JOY",
	   "body":[
		  "JOY(${1:<integer expression>})"
	   ],
	   "description":"Return value Numeric. The JOY function reads a bit-significant result from the joystick specified in the <integer expression> (either 0 or 1)"
	},
	"KEY":{
	   "prefix":"KEY",
	   "body":[
		  "KEY ${1:<integer expression>},\"${2:<string expression>}\""
	   ],
	   "description":"Fixes a new function key definition. There are thirty two keyboard expansion characters in the range 128-159. When one of these characters is read it is expanded into the string associated with it – although the total number of expansion characters cannot exceed 100. The KEY command associates a string with a given expansion character."
	},
	"KEY_DEF":{
	   "prefix":"KEY DEF",
	   "body":[
		  "KEY DEF ${1:<key number>},${1:<repeat>},${1:<normal>[,<shifted>[,<control>]]]}"
	   ],
	   "description":"DEFines the KEY values to be returned by the specified <key number> in the range 0 to 79. The <normal>, <shifted> and <control> parameters should contain the values required to be returned when the key is pressed, alone, together with [SHIFT], and together with [CTRL], respectively. Each of these parameters is optional. the <repeat> parameter enables you to set the key auto-repeat function ON or OFF (1 or 0), the rate of auto-repeat being adjustable by use of the SPEED KEY command."
	},
	"LEFT$":{
	   "prefix":"LEFT$",
	   "body":[
		  "LEFT$(\"${1:<string expression>}\",${2:<integer expression>})"
	   ],
	   "description":"Return value String. Extracts characters to the left of, and including the position specified in the <integer expression> from the the given <string expression>. If the (string expression is shorter than the required length, the whole <string expression> is re-turned."
	},
	"LEN":{
	   "prefix":"LEN",
	   "body":[
		  "LEN(\"${1:<string expression>}\")"
	   ],
	   "description":"Return value Numeric. Returns a number corresponding to the number of all types of characters, including spaces, in the <string expression>."
	},
	"LET":{
	   "prefix":"LET",
	   "body":[
		  "LET ${1:<variable>}=${2:<expression>}"
	   ],
	   "description":"A remnant from early BASICS where variable assignments had to be seen coming . No use apart from providing compatibility with the programs supplied in early BASIC training manuals."
	},
	"LINE_INPUT":{
	   "prefix":"LINE INPUT",
	   "body":[
		  "LINE INPUT ${1:[quoted string]}; ${3:<string variable>}$"
	   ],
	   "description":"Reads an entire line from the stream indicated. The first optional semicolon suppresses the echo of carriage return / line feed. The default <stream expression> is, as always, #0 :screen."
	},
	"LIST":{
	   "prefix":"LIST",
	   "body":[
		  "LIST ${1:[<line number range>}"
	   ],
	   "description":"List program lines to the given stream. 0 is the default screen, 8 is the printer. Listing may be suspended by pressing [ESC] once, and restarted by pressing the space bar. A double [ESC] will return BASIC to the direct mode. Programs may be listed to previously defined windows to assist in debugging programs without overwriting the entire screen area. Listing may be performed from the start of a program to a given point, or from a specified line number to the program end, by omitting the first or last numbers in the line number range (see second example)."
	},
	"LOAD":{
	   "prefix":"LOAD",
	   "body":[
		  "LOAD ${1:<file name>},${3:[<address expression>]}"
	   ],
	   "description":"To read a BASIC program from disc or cassette into memory, replacing any existing program. Specifying the optional <address expression> will cause a binary file to be loaded at that address, rather than the address from which it was saved. A protected BASIC program can NOT be loaded using the LOAD command as it will be immediately deleted from memory. Instead, use the RUN or CHAIN commands."
	},
	"LOCATE":{
	   "prefix":"LOCATE",
	   "body":[
		  "LOCATE ${1:[#<stream expression>},${2:<x coord>},${3:<y coord>}"
	   ],
	   "description":"Moves the text cursor at the stream indicated, to the position specified by the x and y co-ordinates, which are relative to the origin of the stream (WINDOW). Stream 0 is the default stream."
	},
	"LOG":{
	   "prefix":"LOG",
	   "body":[
		  "LOG(${1:<numeric expression>})"
	   ],
	   "description":"Return value Numeric (Real). Calculates the natural logarithm of numeric expression."
	},
	"LOG10":{
	   "prefix":"LOG10",
	   "body":[
		  "LOG10 (${1:<numeric expression>})"
	   ],
	   "description":"Return value Numeric (Real). Calculates the base 10 logarithm of <numeric expression>."
	},
	"LOWER$":{
	   "prefix":"LOWER$",
	   "body":[
		  "LOWER$(\"${1:<string expression>}\")"
	   ],
	   "description":"Return value String. Returns a new string expression the same as the input string expression but in which all upper case characters are converted to lower case. Useful for processing input where the answers may come in mixed upper/lower case."
	},
	"MASK":{
	   "prefix":"MASK",
	   "body":[
		  "MASK ${1:<integer expression>}"
	   ],
	   "description":"Compatibility Only available with BASIC 1.1. Sets the mask or template to be used when drawing lines. The binary value of the <integer expression> in the range 0 to 255, sets the bits in each adjacent group of 8 pixels to ON (1) or OFF (0). The <first point setting> determines whether the first point of the line is to be plotted (1) or not plotted (0). Either of the parameters may be omitted, but not both. If a parameter is omitted, that particular setting is not changed."
	},
	"MAX":{
	   "prefix":"MAX",
	   "body":[
		  "MAX(${1:<list of: numeric expression>})"
	   ],
	   "description":"Return value Numeric.Extracts the largest value from the list of numeric expressions."
	},
	"MEMORY":{
	   "prefix":"MEMORY",
	   "body":[
		  "MEMORY ${1:<address expression>}"
	   ],
	   "description":"Reset BASIC memory parameters to change the amount of BASIC memory available by setting the address of the highest byte. See the description of the keyword HIMEM. To examine the amount of memory, use the FRE command."
	},
	"MERGE":{
	   "prefix":"MERGE",
	   "body":[
		  "MERGE ${1:[<filename>]}"
	   ],
	   "description":"Merge a program from disc or cassette into the current program memory. If tape deck is selected and no file name is stated, then BASIC will attempt to merge the first valid file encountered on tape. If the first character of the filename is a ! , then it is removed from the filename, and has the effect of ç the usual messages generated by the cassette reading process. Note that line numbers in the current program which exist in the new program to be merged will be over-written by the new program lines. If you wish to merge a program into memory without overwriting the current program, then the current program lines should be RENUM bered to a range different from those in the incoming program. All variables, User Functions and open files are discarded. ON ERROR GOTO is turned off, a RESTORE is implemented and the DEFINT , DEFREAL & DEFSTR settings are reset. Protected files will not merge."
	},
	"MID$":{
	   "prefix":"MID$",
	   "body":[
		  "MID$(${1:<string>},${2:<integer expression>},${3:<integer expression>})"
	   ],
	   "description":"Return value String. MID$ specifies part of a string (a sub-string) which can be used either as the destination of an assignment (MID$ as a command) or as an argument in a string expression (MID$ as a Function). The first <integer expression> specifies the position of the first character of the sub-string. The second <integer expression> specifies the length of the sub-string to be returned. If omitted, this extends to the end of the original string."
	},
	"MIN":{
	   "prefix":"MIN",
	   "body":[
		  "MIN(${1:<list of: <numeric expression come separated>})"
	   ],
	   "description":"Return value Numeric. Extracts the smallest value from the list of numeric expressions."
	},
	"MODE":{
	   "prefix":"MODE",
	   "body":[
		  "MODE ${1|0,1,2|}"
	   ],
	   "description":"Change the screen mode (0,1 or 2), and clear the screen to INK 0, which may not be the current PAPER ink. All text and graphics WINDOWS are reset to the whole screen, and the text and graphics cursors homed to their respective origins."
	},
	"MOVE":{
	   "prefix":"MOVE",
	   "body":[
		  "MOVE ${1:<x coord>},${2:<y coord>},${3:[<ink>]},${4:[<ink mode>]}"
	   ],
	   "description":"Compatibility <ink> and <ink mode> are only available with BASIC 1.1. To move the graphics cursor to a position specified by the absolute coordinates. YPOS and XPOS are the corresponding functions to establish the current graphics cursor position.The optional <ink> parameter can be used to specify the graphic pen (in the range 0 to 15). The optional <ink mode> determines how the ink being written interacts with that already on the graphics screen. The four <ink mode>s are: 0: Normal, 1: XOR (eXclusive OR), 2: AND, 3: OR"
	},
	"MOVER":{
	   "prefix":"MOVER",
	   "body":[
		  "MOVER ${1:<x offset>},${2:<y offset>},${3:[<ink>]},${4:[<ink mode>]}"
	   ],
	   "description":"Compatibility <ink> and <ink mode> are only available with BASIC 1.1. To move the graphics cursor to a position relative to the current co-ordinates. YPOS and XPOS are the corresponding functions to establish the current graphics cursor position. The optional <ink> parameter can be used to specify the graphic pen (in the range 0 to 15). The optional <ink mode> determines how the ink being written interacts with that already on the graphics screen. The four <ink mode>s are: 0: Normal, 1: XOR (eXclusive OR), 2: AND, 3: OR"
	},
	"NEW":{
	   "prefix":"NEW",
	   "body":[
		  "NEW"
	   ],
	   "description":"Delete current program and variables. KEY definitions are not lost, and the display is not cleared."
	},
	"NEXT":{
	   "prefix":"NEXT",
	   "body":[
		  "NEXT ${1:[<list of:<variable>]}"
	   ],
	   "description":"Delimits the end of a FOR loop. The NEXT command may be anonymous, or may refer to its matching FOR."
	},
	"NOT":{
	   "prefix":"NOT",
	   "body":[
		  "NOT ${1:<argument>}"
	   ],
	   "description":"Performs bit-wise boolean operation on integers. Inverts each bit in the <argument>."
	},
	"ON-GOSUB":{
	   "prefix":"ON GOSUB",
	   "body":[
		  "ON ${1:<integer expression>} GOSUB ${1:<list of:<line number>}"
	   ],
	   "description":""
	},
	"ON-GOTO":{
	   "prefix":"ON GOTO",
	   "body":[
		  "ON ${1:<integer expression>} GOTO ${1:<list of:<line number>}"
	   ],
	   "description":"GOSUB to the subroutine, or GOTO the statement as directed by the result of the <integer expression>. If the result is 1, then the first line number in the list is chosen, if 2 then the second etc."
	},
	"ON-BREAK":{
	   "prefix":"ON BREAK",
	   "body":[
		  "ON BREAK CONT"
	   ],
	   "description":"Compatibility Only available with BASIC 1.1. Cancels the action of the [ESC] key from stopping the program, and instead CONTinues execution. Care should be taken when using this command, as the program will continue until the computer is completely reset; hence you should SAVE such a program before RUNning it."
	},
	"ON-BREAK-GOSUB":{
	   "prefix":"ON BREAK GOSUB",
	   "body":[
		  "ON BREAK GOSUB ${1:<line number>}"
	   ],
	   "description":"Calls a subroutine on breaking from program execution by pressing [ESC] twice."
	},
	"ON-ERROR":{
	   "prefix":"ON ERROR STOP",
	   "body":[
		  "ON ERROR STOP"
	   ],
	   "description":"When issued in an ON BREAK interrupt subroutine, ON BREAK STOP disables the trap, but has no other immediate effect. In the above program, which includes ON BREAK STOP, the ON BREAK GOSUB trap will only operate once."
	},
	"ON-ERROR-GOTO":{
	   "prefix":"ON ERROR GOTO",
	   "body":[
		  "ON ERROR GOTO ${1:<line number>}"
	   ],
	   "description":""
	},
	"ON-SQ":{
	   "prefix":"ON SQ",
	   "body":[
		  "ON SQ (${1|1,2,4|}) GOSUB ${1:<line number>}"
	   ],
	   "description":"Enable an interrupt for when there is a free slot in the given sound queue. The <channel> is an integer expression yielding one of the values: 1: for channel A, 2: for channel B, 4: for channel C"
	},
	"OPENIN":{
	   "prefix":"OPENIN",
	   "body":[
		  "OPENIN \"${1:<filename>}\""
	   ],
	   "description":"Opens an input file from disc or cassette which contains information for use in the current program in the computer's memory. If tape deck is selected and the first character in the <file name> is ! then the displayed cassette processing messages are suppressed. The program reads in the first block from the cassette, ready for processing. The input file to open myt be an ASCII file."
	},
	"OPENOUT":{
	   "prefix":"OPENOUT",
	   "body":[
		  "OPENOUT \"${1:<filename>}\""
	   ],
	   "description":"Opens an output file onto disc or cassette. If the tape dec is selected and the first character in the <file name> is ! then the displayed cassette processing messages are suppressed. The program creates the first block of data, in the file with the given name. Each block consists of up to 2048 bytes of data."
	},
	"OR":{
	   "prefix":"OR",
	   "body":[
		  "OR ${1:<argument>}"
	   ],
	   "description":"Performs bit-wise boolean operation on integers. Result is 1 unless both arguments are 0."
	},
	"ORIGIN":{
	   "prefix":"ORIGIN",
	   "body":[
		  "ORIGIN ${1:<x>},${2:<y>},${3:[<left>]},${4:[<right>]},${5:[<top>]},${6:[<bottom>]}"
	   ],
	   "description":"Determines the start point for the graphics cursor. The [optional part] of the command contains the instructions to set a new graphics window, which will be operational in all screen modes due the pixel addressing technique employed. The ORIGIN is the point with co-ordinates 0,0 (co-ordinates grow up and right). If any of the window edges are specified to a position that is off the screen, they are assumed to represent the furthest visible position in the given direction."
	},
	"OUT":{
	   "prefix":"OUT",
	   "body":[
		  "OUT ${1:<port number>},${1:<integer expression>}"
	   ],
	   "description":"Sends the value in the <integer expression> (which must lie in the range 0 to 255) to the port address specified in the <port number>."
	},
	"PAPER":{
	   "prefix":"PAPER",
	   "body":[
		  "PAPER ${1:<masked ink>}"
	   ],
	   "description":"Sets the background ink for characters. When characters are written to the text screen, the character cell is filled with the PAPER ink before the character is written - unless the transparent mode has been selected."
	},
	"PEEK":{
	   "prefix":"PEEK",
	   "body":[
		  "PEEK(${1:<address expression>})"
	   ],
	   "description":"Return value Numeric (Integer). Examine the contents of a memory location specified in the <address expression> which should be in the range &0000 to &FFFF (0 to 65535). In all cases PEEK will return the value at the RAM address specified (not the ROM), and wil be in the range &00 to &FF (0 to 255)."
	},
	"PEN":{
	   "prefix":"PEN",
	   "body":[
		  "PEN ${1:<masked ink>}"
	   ],
	   "description":"PEN sets the ink to be used when drawing at the given screen stream, defaulting to screen #0."
	},
	"PI":{
	   "prefix":"PI",
	   "body":[
		  "PI "
	   ],
	   "description":"Return value Numeric (Real). The value of the ratio between the circumference and the diameter of a circle. It is used extensively in graphics routines such as the one listed above."
	},
	"PLOT":{
	   "prefix":"PLOT",
	   "body":[
		  "PLOT ${1:<x co-ordinate>},${1:<y co-ordinate>},${1:[<ink>]},${1:[<ink mode>]}"
	   ],
	   "description":"Compatibility <ink mode> is only available with BASIC 1.1. Plots a point on the graphics screen at the absolute position specified in the x,y co-ordinates. The <ink> in which to plot the point may be specified (in the range 0 to 15). The optional <ink mode> determines how the ink being written interacts with that already on the graphics screen. The four <ink mode>s are: 0: Normal, 1: XOR (eXclusive OR), 2: AND, 3: OR"
	},
	"PLOTR":{
	   "prefix":"PLOTR",
	   "body":[
		  "PLOTR ${1:<x offset>}, ${1:<y offset>},${1:[<ink>]},${1:[<ink mode>]}"
	   ],
	   "description":"Compatibility <ink mode> is only available with BASIC 1.1. Plots a point on the graphics screen at the specified position <x offset> and <y offset>, relative to the current graphics cursor position. The <ink> in which to plot the point may be specified (in the range 0 to 15). The optional <ink mode> determines how the ink being written interacts with that already on the graphics screen. The four <ink mode>s are: 0: Normal, 1: XOR (eXclusive OR), 2: AND, 3: OR"
	},
	"POKE":{
	   "prefix":"POKE",
	   "body":[
		  "POKE ${1:<address expression>},${1:<integer expression>}"
	   ],
	   "description":"Provides direct access to the machine memory. Writes the <integer expression> in the range 0 to 255 directly into the machine memory (RAM) at the specified <address expression>."
	},
	"POS":{
	   "prefix":"POS",
	   "body":[
		  "POS(#${1:<stream expression>})"
	   ],
	   "description":"Return value Numeric. Reports the current horizontal POSition of the text cursor relative to the left edge of the text window. The <stream expression> MUST be specified, and does NOT default to #0. Printer (POS(#8)): Returns the carriage position, where 1 is the left margin. All characters with ASCII reference numbers greater than &lF (31) are included. Cassette/Disc (POS(#9)): Reports the position in the file stream, i.e. the number of printing characters sent to the stream since the last carriage return."
	},
	"PRINT":{
	   "prefix":"PRINT",
	   "body":[
		  "PRINT \"${1:item}\""
	   ],
	   "description":"Prints the list of: <print items>s to the given stream (to stream #0 if <stream expression> is not specified). Note that when a semicolon ; is used to tell the computer to print the following <print item> next to the preceding item, BASIC first checks to see if the following <print item> can fit onto the same line. If not, it will be printed on a new line regardless of the semicolon. Note that when a coma , is used to tell the computer to print the following <print item> in the next print zone, BASIC first checks to see that the preceding item has not exceeded the lenght of the current zone. If it has, the following <print item> is printed in a further zone."
	},
	"PRINT-SPC":{
	   "prefix":"PRINT SPC",
	   "body":[
		  "PRINT SPC(${1:<integer expression>})\"${2:<string expression>}\";SPC(${3:<string expression>})\"${4:<string expression>}\""
	   ],
	   "description":"SPC prints the number of spaces specified in the <integer expression>, and will print any following <print item> immediately next to the spaces (assuming the follown <print item> will fit onto the line). Hence it is not necessary to terminate SPC with a semicolon."
	},
	"PRINT-TAB":{
	   "prefix":"PRINT TAB",
	   "body":[
		  "PRINT TAB (${1:<integer expression>})\"${2:<string expression>}\";TAB(${3:<string expression>})\"${4:<string expression>}\""
	   ],
	   "description":"TAB prints the number of spaces relative to the left edge of the text window, and will print any following <print item> immediately next to the spaces (assuming the following <print item> will fit ontoi the line). Hence it is not necessary to terminate TAB with a semicolon. If the current position is greater than the required position, then a carriage return is executed, followed by spaces to reach the required position on the next line."
	},
	"PRINT-USING":{
	   "prefix":"PRINT USING",
	   "body":[
		  "PRINT USING"
	   ],
	   "description":"PRINT USING enables you to specify the print format of the expression returned by the PRINT command. This is achieved by specifying a <format template> to which the printed result must correspond. The <separator> is a comma or semicolon."
	},
	"RAD":{
	   "prefix":"RAD",
	   "body":[
		  "RAD"
	   ],
	   "description":"Set Radians Mode"
	},
	"RANDOMIZE":{
	   "prefix":"RANDOMIZE",
	   "body":[
		  "RANDOMIZE ${1:[<numeric expression>]}"
	   ],
	   "description":"BASIC's random number generator produces a pseudo random sequence in which each number depends on the previous number - starting from a given number, the sequence is always the same. RANDOMIZE sets a new initial value for the random number generator, either to a given value, or to a value entered by the operator. RANDOMIZE TIME will produce a sequence that will be difficult to repeat."
	},
	"READ":{
	   "prefix":"READ",
	   "body":[
		  "READ ${1:list of:<variable>}"
	   ],
	   "description":"READ fetches data from the list of constants supplied in the corresponding DATA statements and assigns it to variables, automatically stepping to the next item in the data statement. RESTORE will return the pointer to the beginning of the DATA statement."
	},
	"RELEASE":{
	   "prefix":"RELEASE",
	   "body":[
		  "RELEASE ${1:<sound channels>}"
	   ],
	   "description":"When a sound is placed on a sound queue it may include a hold state. If any of the channels specified in this channel are in hold state, then they are released, the expression to identify the sound channel is bit significant: A= bit 0, B= bit 1, C= bit 2 Thus 4 (binary &X0100) releases Queue C."
	},
	"REM":{
	   "prefix":"REM",
	   "body":[
		  "REM ${1:<rest of line>}"
	   ],
	   "description":"Used to place REM arks or REM inders in programs without affecting the program operation in any way. The : line separator is also ignored, everything from the REM to the line end is ignored. A single quote character ' in a line (not part of a <string expression>) is equivalent to :REM, other than in a DATA command, where it is treated as part of an unquoted string."
	},
	"REMAIN":{
	   "prefix":"REMAIN",
	   "body":[
		  "REMAIN(${1:<integer expression>})"
	   ],
	   "description":"Return value Numeric. Returns the REMAINing count from the delay timer specified in <integer expression> (in the range 0 to 3) and disable it."
	},
	"RESTORE":{
	   "prefix":"RESTORE",
	   "body":[
		  "RESTORE ${1:[<line number>]}"
	   ],
	   "description":"Restores the position of the reading pointer back to the beginning of the DATA statement specified in the optional <line number>. Omitting <line number> restores the position of the pointer back to the beginning of the first DATA statement."
	},
	"RESUME":{
	   "prefix":"RESUME",
	   "body":[
		  "RESUME ${1:[<line number>]}"
	   ],
	   "description":"When an error has been trapped by an ON ERROR GOTO command, and has been processed, RESUME allows normal program execution to continue, the resuming line number being optionally specifiable. If not specified, the line in which the error has occurred is returned to. RESUME NEXT returns to the line immediately following the statement in which the error was detected."
	},
	"RESUME-NEXT":{
	   "prefix":"RESUME NEXT",
	   "body":[
		  "RESUME NEXT"
	   ],
	   "description":"When an error has been trapped by an ON ERROR GOTO command, and has been processed, RESUME allows normal program execution to continue, the resuming line number being optionally specifiable. If not specified, the line in which the error has occurred is returned to. RESUME NEXT returns to the line immediately following the statement in which the error was detected."
	},
	"RETURN":{
	   "prefix":"RETURN",
	   "body":[
		  "RETURN"
	   ],
	   "description":"Signals the end of a subroutine. BASIC returns to continue processing at the point after the GOSUB which invoked it."
	},
	"RIGHT$":{
	   "prefix":"RIGHT$",
	   "body":[
		  "RIGHT$(\"${1:<string expression>}\",${2:<integer expression>})"
	   ],
	   "description":"Return value String. Extracts the number of characters specified by the <integer expression> from the right of the string expression. If the string expression is shorter than the required length, the whole <string expression> is returned."
	},
	"RND":{
	   "prefix":"RND",
	   "body":[
		  "RND"
	   ],
	   "description":"Return value Numeric. Fetches a random number, which may be the next in sequence, a repeat of the last one, or the first in a new sequence. RND(0) returns a copy of the last random number generated. Where <numeric expression> is negative, the number sequence generated is predictable."
	},
	"ROUND":{
	   "prefix":"ROUND",
	   "body":[
		  "ROUND (${1:<numeric expression>},${2:[<integer expression>]})"
	   ],
	   "description":"Return value Numeric. Rounds <numeric expression> to a number of decimal places or power of ten specified in <integer expression>. If the <integer expression> is less than zero, then value is rounded to give an absolute integer followed by a number of zeros determined by the <integer expression> before the decimal point."
	},
	"RUN":{
	   "prefix":"RUN",
	   "body":[
		  "RUN \"${1:<string expression>}\""
	   ],
	   "description":"Loads a program (BASIC or binary) from disc or tape and start executing it."
	},
	"RUN2":{
	   "prefix":"RUN line number",
	   "body":[
		  "RUN ${1:[<line number>]}"
	   ],
	   "description":"Loads a program (BASIC or binary) from disc or tape and start executing it."
	},
	"SAVE":{
	   "prefix":"SAVE",
	   "body":[
		  "SAVE \"${1:<filename>}\",${2:[<file type>]},${3:[<binary parameters>]}"
	   ],
	   "description":"Saves the current BASIC program or an area of memory to tape or disc."
	},
	"SGN":{
	   "prefix":"SGN",
	   "body":[
		  "SGN (${1:<numeric expression>})"
	   ],
	   "description":"Return value Numeric (-1, 0 or 1). Determines the sign of the <numeric expression>. Returns -1 if <numeric expression> is less than 0. Returns 0 if <numeric expression> equal 0. Returns 1 if <numeric expression> is greater than zero."
	},
	"SIN":{
	   "prefix":"SIN",
	   "body":[
		  "SIN(${1:<numeric expression>})"
	   ],
	   "description":"Return value Numeric (Real). Calculates the Real value for the Sine of <numeric expression>, defaulting to the Radian measure mode unless otherwise declared by a DEG command."
	},
	"SOUND":{
	   "prefix":"SOUND",
	   "body":[
		  "SOUND ${1:<channel status>}, ${2:<tone period>},${3:[<duration>]},${4:[<volume>]},${5:[<volume envelope>]},${6:[<tone envelope>]},${7:[<noise period>]}"
	   ],
	   "description":""
	},
	"SPACE":{
	   "prefix":"SPACE",
	   "body":[
		  "SPACE$(${1:<integer expression>})"
	   ],
	   "description":"Return value String. Creates a string of spaces of the given length."
	},
	"SPEED-INK":{
	   "prefix":"SPEED INK",
	   "body":[
		  "SPEED INK ${1:<integer expression>},${1:<integer expression>}"
	   ],
	   "description":"The INK and BORDER commands allow two colour to be associated with each Ink, in which case the INK alternates between the two colours. The first integer expression) specifies the time for the first INK specified to be used, and the second integer expression sets the time for the second INK . Times between colour changes are measured in units of 1/50 second. (50 Hz) You must exercise careful judgement to avoid mesmeric effects when selecting colours and repeat rates!"
	},
	"SPEED-KEY":{
	   "prefix":"SPEED KEY",
	   "body":[
		  "SPEED KEY ${1:<start delay>},${1:<repeat period>}"
	   ],
	   "description":"If held down continuously, the keys auto repeat at the <repeat period> after the given <start delay> period. The setting is made in 1/50 sec units, in the range 1 to 255. The default rate is set to 30,2. Very small start delays will interact with keyboard de-bounce routines. The actual speed at which the keyboard is read by the software is not affected by this command. Not all keys repeat, the KEY DEF command will allow the user to redefine the particular attributes of a given key."
	},
	"SPEED-WRITE":{
	   "prefix":"SPEED WRITE",
	   "body":[
		  "SPEED WRITE ${1:<integer expression>}"
	   ],
	   "description":"The cassette can be write at either 2000 baud (where <integer expression> is 1), or the default of 1000 baud (where the <integer expression> is 0). When loading a file from tape, the CPC464 automatically establishes the correct reading speed from information in the file software, thus it is not necessary for the user to specify. When using cassette tape of uncertain data recording ability, the 1000 baud rate is recommended for maximum reliability."
	},
	"SQ":{
	   "prefix":"SQ",
	   "body":[
		  "SQ(${1:<channel>})"
	   ],
	   "description":"Return value Numeric (8bit significant). The SQ function is used to check the number of free entries in the queue for a given channel, where channel A is 1, B is 2, and C is 3. The function determines whether the channel is active - and if not - why the entry at the head of the queue (if any) is waiting. The result is bit significant: bits 0,1,2 indicate the number of free entries in the queue bits 3,4,5 indicate the Rendezvous state at the head of the queue (if any) bit 6 is set if the head of the queue is held bit 7 is set if the channel is currently"
	},
	"SQR":{
	   "prefix":"SQR",
	   "body":[
		  "SQR(${1:<numeric expression>})"
	   ],
	   "description":"Return value Numeric. Returns the square root of <numeric expression>."
	},
	"STOP":{
	   "prefix":"STOP",
	   "body":[
		  "STOP"
	   ],
	   "description":"To stop execution of a program, but leave BASIC in a state where the program can be restarted after the STOP command by using the CONT command. This may be used to interrupt the program at a particular point when debugging."
	},
	"STR$":{
	   "prefix":"STR$",
	   "body":[
		  "STR$(${1:<numeric expression>})"
	   ],
	   "description":"Return value String. Converts the numeric expression) to a decimal string representation in the same form as used in the PRINT command."
	},
	"STRING$":{
	   "prefix":"STRING$",
	   "body":[
		  "STRING$(${1:<integer expression>},\"${1:<character expression>}\")"
	   ],
	   "description":"Return value String. Delivers a <string expression> consisting of the specified character repeated a number of times."
	},
	"SYMBOL":{
	   "prefix":"SYMBOL",
	   "body":[
		  "SYMBOL ${1:<character number>},${1:<list of: row>}"
	   ],
	   "description":"The SYMBOL command redefines the representation of a given character that has first been specified in the SYMBOL AFTER command. The character number, is chosen from the available ASCII or other characters from the CPC464’ s standard character set, and the following entries define the new character on an 8×8 pixel matrix. A 0 in the row indicates the paper colour to be used and a 1 indicates that the pixel is to be set to the current ink colour."
	},
	"SYMBOL-AFTER":{
	   "prefix":"SYMBOL AFTER",
	   "body":[
		  "SYMBOL AFTER ${1:<integer expression>}"
	   ],
	   "description":"The number of user definable characters is set by the SYMBOL AFTER command. The default setting is 240, giving 16 user defined characters. If the <integer expression>, is 32, then all characters from 32 to 255 are redefinable.  When ever a SYMBOL AFTER command is used, all user defined characters are reset to the default condition."
	},
	"TAG":{
	   "prefix":"TAG",
	   "body":[
		  "TAG ${1:[#<stream expression>]}"
	   ],
	   "description":"Text sent to a given stream may be redirected to be written at the graphics cursor position. This allows text and symbols to be mixed with graphics. The stream expression) defaults to 0 if omitted. The top left of the character cell is tagged to the graphics cursor, and non-printing control characters will display. In particular, new line characters will display if the PRINT statement is not followed by a semi-colon ;"
	},
	"TAGOFF":{
	   "prefix":"TAGOFF",
	   "body":[
		  "TAGOFF ${1:[#<stream expression>]}"
	   ],
	   "description":"Cancels the TAG for a given stream, and sends the text to the previous text cursor position at the point at which TAG was invoked."
	},
	"TAN":{
	   "prefix":"TAN",
	   "body":[
		  "TAN(${1:<numeric expression>})"
	   ],
	   "description":"Return value Numeric. Calculates the tangent for the angle given in <numeric expression>, which must be in the range -200,000….+200,000, defaulting to radian measure unless declared otherwise by a DEG command (like in the following example)."
	},
	"TEST":{
	   "prefix":"TEST",
	   "body":[
		  "TEST(<x co-ordinate>,<y co-ordinate>)"
	   ],
	   "description":"Return value Numeric (0 to 15). Reports the value of the ink currently at the specified graphics screen location."
	},
	"TESTR":{
	   "prefix":"TESTR",
	   "body":[
		  "TESTR(<x offset>, <y offset>)"
	   ],
	   "description":"Return value Numeric (0 to 15). Moves the graphics cursor relatively from it's current location and reports the value of the ink at the new location."
	},
	"TIME":{
	   "prefix":"TIME",
	   "body":[
		  "TIME "
	   ],
	   "description":"Return value Numeric. Holds the elapsed time since switch-on, excluding periods when reading or writing the cassette. The units of time are 1/300th of a second."
	},
	"TRON":{
	   "prefix":"TRON",
	   "body":[
		  "TRON "
	   ],
	   "description":""
	},
	"TROFF":{
	   "prefix":"TROFF",
	   "body":[
		  "TROFF "
	   ],
	   "description":"BASIC includes the facility to trace the execution of a program, by reporting the number of each line in square brackets [ ] , just before it is executed. TRON enables the feature, TROFF turns it off."
	},
	"UNT":{
	   "prefix":"UNT",
	   "body":[
		  "UNT(${1:<address expression>})"
	   ],
	   "description":"Return value Numeric. Converts an unsigned 16-bit integer in the range 0 to 65535. Returns an integer value in the range -32768 to +32767."
	},
	"UPPER$":{
	   "prefix":"UPPER$",
	   "body":[
		  "UPPER$(\"${1:<string expression>}\")"
	   ],
	   "description":"Return value String. Returns a new string expression the same as the input string expression) but in which all lower case characters are converted to upper case."
	},
	"VAL":{
	   "prefix":"VAL",
	   "body":[
		  "VAL(\"${1:<string expression>}\")"
	   ],
	   "description":"Return value Numeric. Extracts a <numeric expression> from the beginning of the string expression,. The opposite of STR$."
	},
	"VPOS":{
	   "prefix":"VPOS",
	   "body":[
		  "VPOS (#${1:<stream expression>})"
	   ],
	   "description":"Return value Numeric. Returns the vertical position of the text cursor for the stream expression."
	},
	"WAIT":{
	   "prefix":"WAIT",
	   "body":[
		  "WAIT ${1:<port number>},${2:<mask>},${3:[<inversion>]}"
	   ],
	   "description":"Suspends operation until a given I/O port returns a particular value in the range 0 to 255. BASIC loops whilst reading the I/O port. The value-read is Exclusive ORed with the <inversion> and then ANDed with the <mask> until a non-zero result occurs. BASIC will get stuck in a WAIT loop if the required condition does not occur."
	},
	"WEND":{
	   "prefix":"WEND",
	   "body":[
		  "WEND "
	   ],
	   "description":"The WHILE/WEND loop repeatedly executes a body of program until a given condition is true. The illustration here uses the WHILE/WEND loop to demonstrate the elegance of programs constructed using this approach. The body of the features of a variety of different clocks can now be added. The WEND command terminates the WHILE loop."
	},
	"WHILE":{
	   "prefix":"WHILE",
	   "body":[
		  "WHILE ${1:<logical expression>}"
	   ],
	   "description":"A WHILE loop repeatedly executes a body of program until a given condition is true. The WHILE command defines the head of the loop, and gives the condition. The WEND command terminates the WHILE loop."
	},
	"WIDTH":{
	   "prefix":"WIDTH",
	   "body":[
		  "WIDTH ${1:<integer expression>}"
	   ],
	   "description":"Tells BASIC how wide the printer is in characters, this information allows BASIC to insert carriage returns as required when printing."
	},
	"WINDOW":{
	   "prefix":"WINDOW",
	   "body":[
		  "WINDOW ${1:[#<stream expression>},${2:<left>},${3:<right>},${4:<top>},${5:<bottom>}"
	   ],
	   "description":"Sets a text window for a given screen stream."
	},
	"WINDOW-SWAP":{
	   "prefix":"WINDOW SWAP",
	   "body":[
		  "WINDOW SWAP ${1:<stream expression>},${2:<stream expression>}"
	   ],
	   "description":"Exchanges the text windows. For example, BASIC messages sent to stream #O may be swapped with another window to highlight aspects of program development and operation."
	},
	"WRITE":{
	   "prefix":"WRITE",
	   "body":[
		  "WRITE ${1:[#<stream expression>},${2:[<write list>]}"
	   ],
	   "description":"Prints the values of a number of expressions to the given stream, separating them by commas and enclosing strings in double quotes. Used mainly for outputting data to files (on tape or disc)."
	},
	"XOR":{
	   "prefix":"XOR",
	   "body":[
		  "XOR ${1:<argument>}"
	   ],
	   "description":"Performs bit-wise boolean operation on integers. Result is 1 unless both arguments are the same - eXclusive OR."
	},
	"XPOS":{
	   "prefix":"XPOS",
	   "body":[
		  "XPOS "
	   ],
	   "description":"Return value Numeric. Establishes the horizontal position of the graphics cursor."
	},
	"YPOS":{
	   "prefix":"YPOS",
	   "body":[
		  "YPOS "
	   ],
	   "description":"Return value Numeric. Establishes the vertical position of the graphics cursor."
	},
	"ZONE":{
	   "prefix":"ZONE",
	   "body":[
		  "ZONE ${1:<integer expression>}"
	   ],
	   "description":"Changes the width of the Print Zone used in PRINT, from the default value of 13 to a new value in the range 1 to 255. Reset by NEW, LOAD, CHAIN and RUN\"<file name>\" commands."
	}
	// COMMAND 8BP
 }